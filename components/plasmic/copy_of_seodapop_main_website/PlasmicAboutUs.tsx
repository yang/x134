// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8wYegXbGoCMkdE9E8Fa7UT
// Component: EDiepQRqOKW

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: H6-d8Aj-Ormm/component
import PersonCard from "../../PersonCard"; // plasmic-import: H127KnkFXm0r/component
import ServiceValue from "../../ServiceValue"; // plasmic-import: bvlZ27CrB8OP/component
import HomeFooterTop from "../../HomeFooterTop"; // plasmic-import: mJUZtuXVhVM/component
import FooterMain from "../../FooterMain"; // plasmic-import: 0v3474AfNCdQ/component

import { useScreenVariants as useScreenVariantsxz8Xf4CC9JH } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: xz8Xf4c_C9jH/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_copy_of_seodapop_main_website.module.css"; // plasmic-import: 8wYegXbGoCMkdE9E8Fa7UT/projectcss
import sty from "./PlasmicAboutUs.module.css"; // plasmic-import: EDiepQRqOKW/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: Cq9B2xiEC7Ec/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: BZE6sIq4hFJt/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: FQ1LSLsx1OT7/icon

createPlasmicElementProxy;

export type PlasmicAboutUs__VariantMembers = {};
export type PlasmicAboutUs__VariantsArgs = {};
type VariantPropType = keyof PlasmicAboutUs__VariantsArgs;
export const PlasmicAboutUs__VariantProps = new Array<VariantPropType>();

export type PlasmicAboutUs__ArgsType = {};
type ArgPropType = keyof PlasmicAboutUs__ArgsType;
export const PlasmicAboutUs__ArgProps = new Array<ArgPropType>();

export type PlasmicAboutUs__OverridesType = {
  root?: p.Flex<"div">;
  aboutUsBanner?: p.Flex<"div">;
  foreground2?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  ourTeamSection?: p.Flex<"div">;
  columns?: p.Flex<"div">;
  container?: p.Flex<"div">;
  row1?: p.Flex<"div">;
  serviceRow?: p.Flex<"div">;
  homeFooterTop?: p.Flex<typeof HomeFooterTop>;
  footerMain?: p.Flex<typeof FooterMain>;
};

export interface DefaultAboutUsProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAboutUs__RenderFunc(props: {
  variants: PlasmicAboutUs__VariantsArgs;
  args: PlasmicAboutUs__ArgsType;
  overrides: PlasmicAboutUs__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsxz8Xf4CC9JH()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicAboutUs.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicAboutUs.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicAboutUs.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__kb539)}
            >
              <Header
                className={classNames("__wab_instance", sty.header__p0HIj)}
              />
            </p.Stack>
          ) : null}
          <div
            data-plasmic-name={"aboutUsBanner"}
            data-plasmic-override={overrides.aboutUsBanner}
            className={classNames(projectcss.all, sty.aboutUsBanner)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"foreground2"}
              data-plasmic-override={overrides.foreground2}
              hasGap={true}
              className={classNames(projectcss.all, sty.foreground2)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__cFNh)}
              >
                <h1
                  data-plasmic-name={"h1"}
                  data-plasmic-override={overrides.h1}
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1
                  )}
                >
                  {hasVariant(globalVariants, "screen", "sm")
                    ? "About US"
                    : "About Us"}
                </h1>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___785Vf
                  )}
                >
                  {hasVariant(globalVariants, "screen", "sm")
                    ? "Lorem Ipsum is simply dummy text of the printing and typesetting industry."
                    : "\nOur passion is in working with business owners to ensure they have the best search engine exposure for their business. We focus on the right user experience to convert their website visitors into sales leads."}
                </div>
              </p.Stack>
            </p.Stack>
          </div>
          {true ? (
            <div
              data-plasmic-name={"ourTeamSection"}
              data-plasmic-override={overrides.ourTeamSection}
              className={classNames(projectcss.all, sty.ourTeamSection)}
            >
              <div
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                className={classNames(projectcss.all, sty.columns)}
              >
                <div className={classNames(projectcss.all, sty.column__uHySw)}>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__r0QMg
                    )}
                  >
                    {"Our team"}
                  </h2>
                  <div
                    data-plasmic-name={"container"}
                    data-plasmic-override={overrides.container}
                    className={classNames(projectcss.all, sty.container)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"row1"}
                      data-plasmic-override={overrides.row1}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.row1)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__x5Xel
                        )}
                      >
                        <PersonCard
                          className={classNames(
                            "__wab_instance",
                            sty.personCard__kxoLm
                          )}
                          image={
                            "https://old.seodapop.com/wp-content/uploads/2014/06/IMG_1822-e1502097727507.jpg" as const
                          }
                          slot={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__g9JZi
                              )}
                            >
                              {"Founder,CEO"}
                            </div>
                          }
                          slot2={
                            <React.Fragment>
                              {true ? (
                                <p.PlasmicLink
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.a,
                                    sty.link___6OAwt
                                  )}
                                  component={Link}
                                  href={`/`}
                                  onClick={async event => {
                                    const $steps = {};
                                    $steps["updateStateVariable"] = true
                                      ? (() => {
                                          const actionArgs = {};
                                          return __wrapUserFunction(
                                            {
                                              type: "InteractionLoc",
                                              actionName: "updateVariable",
                                              interactionUuid: "9i8TFK4g1PB",
                                              componentUuid: "EDiepQRqOKW"
                                            },
                                            () =>
                                              (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;
                                                undefined;
                                              })?.apply(null, [actionArgs]),
                                            actionArgs
                                          );
                                        })()
                                      : undefined;
                                    if (
                                      typeof $steps["updateStateVariable"] ===
                                        "object" &&
                                      typeof $steps["updateStateVariable"]
                                        .then === "function"
                                    ) {
                                      $steps["updateStateVariable"] =
                                        await __wrapUserPromise(
                                          {
                                            type: "InteractionLoc",
                                            actionName: "updateVariable",
                                            interactionUuid: "9i8TFK4g1PB",
                                            componentUuid: "EDiepQRqOKW"
                                          },
                                          $steps["updateStateVariable"]
                                        );
                                    }
                                  }}
                                  platform={"nextjs"}
                                >
                                  <IconIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__hV1Ar
                                    )}
                                    href={"https://www.linkedin.com/" as const}
                                    link={"https://www.linkedin.com/" as const}
                                    role={"img"}
                                  />
                                </p.PlasmicLink>
                              ) : null}
                              <p.PlasmicLink
                                className={classNames(
                                  projectcss.all,
                                  projectcss.a,
                                  sty.link__qa7Gb
                                )}
                                component={Link}
                                href={`/`}
                                platform={"nextjs"}
                              >
                                <Icon2Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__ivEj1
                                  )}
                                  role={"img"}
                                />
                              </p.PlasmicLink>
                              <p.PlasmicLink
                                className={classNames(
                                  projectcss.all,
                                  projectcss.a,
                                  sty.link__fwM3M
                                )}
                                component={Link}
                                href={`/`}
                                platform={"nextjs"}
                              >
                                <Icon3Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__aiUDz
                                  )}
                                  role={"img"}
                                />
                              </p.PlasmicLink>
                            </React.Fragment>
                          }
                        >
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__k0VoQ
                            )}
                          >
                            {"Hamid Tavakoli"}
                          </h3>
                        </PersonCard>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__zcrab
                        )}
                      >
                        <PersonCard
                          className={classNames(
                            "__wab_instance",
                            sty.personCard___6CuEf
                          )}
                          image={
                            "https://old.seodapop.com/wp-content/uploads/2014/06/IMG_1838-e1504506724781.jpg" as const
                          }
                          slot={"CO Founder, Vice president"}
                        >
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__goyCq
                            )}
                          >
                            {"Alexandra Santana"}
                          </h3>
                        </PersonCard>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__xjg8A
                        )}
                      >
                        <PersonCard
                          className={classNames(
                            "__wab_instance",
                            sty.personCard__jXexL
                          )}
                          image={{
                            src: "/plasmic/copy_of_seodapop_main_website/images/img74B2C262B9F81Jpeg.jpg",
                            fullWidth: 1170,
                            fullHeight: 1162,
                            aspectRatio: undefined
                          }}
                          slot={"CSR"}
                        >
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__t99F0
                            )}
                          >
                            {"Paula Pedrini"}
                          </h3>
                        </PersonCard>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column___2Kdxp
                        )}
                      >
                        <PersonCard
                          className={classNames(
                            "__wab_instance",
                            sty.personCard__fckt3
                          )}
                          image={{
                            src: "/plasmic/copy_of_seodapop_main_website/images/_1656010876757Jpeg.jpg",
                            fullWidth: 368,
                            fullHeight: 368,
                            aspectRatio: undefined
                          }}
                          slot={"Software Engineer"}
                        >
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3___0Uetz
                            )}
                          >
                            {"Danny Tsui"}
                          </h3>
                        </PersonCard>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__qOBxc
                        )}
                      >
                        <PersonCard
                          className={classNames(
                            "__wab_instance",
                            sty.personCard__reVvz
                          )}
                          image={{
                            src: "/plasmic/copy_of_seodapop_main_website/images/_1680081041398Jpeg.jpg",
                            fullWidth: 800,
                            fullHeight: 800,
                            aspectRatio: undefined
                          }}
                          slot={"Software Engineer"}
                        >
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__hCqj
                            )}
                          >
                            {"Tawhid Abdullah "}
                          </h3>
                        </PersonCard>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column___5An2G
                        )}
                      >
                        <PersonCard
                          className={classNames(
                            "__wab_instance",
                            sty.personCard__beVzw
                          )}
                          image={{
                            src: "/plasmic/copy_of_seodapop_main_website/images/downloadjpeg.jpg",
                            fullWidth: 225,
                            fullHeight: 225,
                            aspectRatio: undefined
                          }}
                          slot={"Software Engineer"}
                        >
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__dPoGl
                            )}
                          >
                            {"Hiren Shukla"}
                          </h3>
                        </PersonCard>
                      </div>
                    </p.Stack>
                  </div>
                </div>
              </div>
            </div>
          ) : null}
          <div className={classNames(projectcss.all, sty.freeBox__ivlZ)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__x2MRg)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__w595K)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__eU89)}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__g5DUm
                    )}
                  >
                    {"Our values"}
                  </h2>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wtdl
                    )}
                  >
                    {
                      "At our core, quality takes precedence over everything else. We are deeply committed to delivering exceptional applications that stand out as unique and deserving of individualized attention. Our unwavering dedication lies in crafting customized solutions that precisely cater to the specific needs of our clients. With meticulous attention to detail and a focus on craftsmanship, we ensure that each project receives the utmost care it deserves, resulting in exceptional outcomes."
                    }
                  </div>
                </p.Stack>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ph5QN)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"serviceRow"}
                    data-plasmic-override={overrides.serviceRow}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.serviceRow)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column___4Z08)}
                    >
                      {true ? (
                        <ServiceValue
                          className={classNames(
                            "__wab_instance",
                            sty.serviceValue__tc39H
                          )}
                          slot={
                            "Our focus is primarily on product development, relying on the belief that the quality of our work will serve as its own marketing tool. We prioritize delivering exceptional products that satisfy our clients, trusting that their positive experiences will generate word-of-mouth recommendations"
                          }
                        >
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__c4DVx
                            )}
                          >
                            {"Create a product that sells itself."}
                          </h3>
                        </ServiceValue>
                      ) : null}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__iszks)}
                    >
                      {true ? (
                        <ServiceValue
                          className={classNames(
                            "__wab_instance",
                            sty.serviceValue__nUxCt
                          )}
                          slot={
                            "Our continuous learning approach, embracing new technologies without hesitation in our projects. This commitment allow us to stay at the front of emerging web technologies, ensuring that we can provide our clients with cutting-edge solutions and deliver the highest quality services."
                          }
                        >
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__hoMNd
                            )}
                          >
                            {"Learning is a life long journey, enjoy it."}
                          </h3>
                        </ServiceValue>
                      ) : null}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__mGk9D)}
                    >
                      {true ? (
                        <ServiceValue
                          className={classNames(
                            "__wab_instance",
                            sty.serviceValue__eUxuM
                          )}
                          slot={
                            "Throughout our years of experience, we have developed a wide range of applications, from simple to complex. In all our app development projects, we adhere to the Agile methodology. We believe constant communication with our customers, keeping them informed about the progress and status of their applications"
                          }
                        >
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__oPw9W
                            )}
                          >
                            {"Trust happens only with transparency."}
                          </h3>
                        </ServiceValue>
                      ) : null}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__gy6Kz)}
                    >
                      {true ? (
                        <ServiceValue
                          className={classNames(
                            "__wab_instance",
                            sty.serviceValue__nN4Pp
                          )}
                          slot={
                            "At SeodaPop, we foster a culture of mutual respect and inclusivity, both within our team and in our relationships with clients. We prioritize equality and recognize the significance of treating everyone with respect and fairness."
                          }
                        >
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__l4IcA
                            )}
                          >
                            {
                              "Respect: If you want to get it, you've got to give it."
                            }
                          </h3>
                        </ServiceValue>
                      ) : null}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__p5G3J)}
                    >
                      {true ? (
                        <ServiceValue
                          className={classNames(
                            "__wab_instance",
                            sty.serviceValue__lEdPz
                          )}
                          slot={
                            "A culture of collective responsibility within our company, where every individual takes ownership of their tasks and contributes to the overall success. We embrace a flat organizational structure, foregoing traditional corporate hierarchies. This facilitates rapid decision-making to adapt quickly to changes in the industry"
                          }
                        >
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__yzr6H
                            )}
                          >
                            {
                              "Responsibility is not to be given but to be shared."
                            }
                          </h3>
                        </ServiceValue>
                      ) : null}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__mqyC)}
                    >
                      {true ? (
                        <ServiceValue
                          className={classNames(
                            "__wab_instance",
                            sty.serviceValue__uXl
                          )}
                          slot={
                            "At SeodaPop, we are committed to making coding education accessible to everyone.  our internship programs offer valuable experiences and pathways for young professionals to enter the workforce. Our ultimate aim is to empower individuals from diverse backgrounds to acquire coding knowledge and thrive in the rapidly evolving field of technology."
                          }
                        >
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__tFaoa
                            )}
                          >
                            {"To move forward, you have to give back."}
                          </h3>
                        </ServiceValue>
                      ) : null}
                    </div>
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__rMcSf)}>
            <HomeFooterTop
              data-plasmic-name={"homeFooterTop"}
              data-plasmic-override={overrides.homeFooterTop}
              className={classNames("__wab_instance", sty.homeFooterTop)}
            />
          </div>
          <FooterMain
            data-plasmic-name={"footerMain"}
            data-plasmic-override={overrides.footerMain}
            className={classNames("__wab_instance", sty.footerMain)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "aboutUsBanner",
    "foreground2",
    "h1",
    "ourTeamSection",
    "columns",
    "container",
    "row1",
    "serviceRow",
    "homeFooterTop",
    "footerMain"
  ],
  aboutUsBanner: ["aboutUsBanner", "foreground2", "h1"],
  foreground2: ["foreground2", "h1"],
  h1: ["h1"],
  ourTeamSection: ["ourTeamSection", "columns", "container", "row1"],
  columns: ["columns", "container", "row1"],
  container: ["container", "row1"],
  row1: ["row1"],
  serviceRow: ["serviceRow"],
  homeFooterTop: ["homeFooterTop"],
  footerMain: ["footerMain"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  aboutUsBanner: "div";
  foreground2: "div";
  h1: "h1";
  ourTeamSection: "div";
  columns: "div";
  container: "div";
  row1: "div";
  serviceRow: "div";
  homeFooterTop: typeof HomeFooterTop;
  footerMain: typeof FooterMain;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAboutUs__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAboutUs__VariantsArgs;
    args?: PlasmicAboutUs__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAboutUs__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAboutUs__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAboutUs__ArgProps,
          internalVariantPropNames: PlasmicAboutUs__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAboutUs__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAboutUs";
  } else {
    func.displayName = `PlasmicAboutUs.${nodeName}`;
  }
  return func;
}

export const PlasmicAboutUs = Object.assign(
  // Top-level PlasmicAboutUs renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    aboutUsBanner: makeNodeComponent("aboutUsBanner"),
    foreground2: makeNodeComponent("foreground2"),
    h1: makeNodeComponent("h1"),
    ourTeamSection: makeNodeComponent("ourTeamSection"),
    columns: makeNodeComponent("columns"),
    container: makeNodeComponent("container"),
    row1: makeNodeComponent("row1"),
    serviceRow: makeNodeComponent("serviceRow"),
    homeFooterTop: makeNodeComponent("homeFooterTop"),
    footerMain: makeNodeComponent("footerMain"),

    // Metadata about props expected for PlasmicAboutUs
    internalVariantProps: PlasmicAboutUs__VariantProps,
    internalArgProps: PlasmicAboutUs__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "About Us",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAboutUs;
/* prettier-ignore-end */
