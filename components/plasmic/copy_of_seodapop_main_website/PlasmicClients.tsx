// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8wYegXbGoCMkdE9E8Fa7UT
// Component: Cd1oCrppKHfi

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  usePlasmicDataConfig,
  executePlasmicDataOp,
  usePlasmicDataOp
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: H6-d8Aj-Ormm/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: EUozRgV8Ll6k/codeComponent
import Client from "../../Client"; // plasmic-import: RRqedl4q13uJ/component
import HomeFooterTop from "../../HomeFooterTop"; // plasmic-import: mJUZtuXVhVM/component
import FooterMain from "../../FooterMain"; // plasmic-import: 0v3474AfNCdQ/component

import { useScreenVariants as useScreenVariantsxz8Xf4CC9JH } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: xz8Xf4c_C9jH/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_copy_of_seodapop_main_website.module.css"; // plasmic-import: 8wYegXbGoCMkdE9E8Fa7UT/projectcss
import sty from "./PlasmicClients.module.css"; // plasmic-import: Cd1oCrppKHfi/css

createPlasmicElementProxy;

export type PlasmicClients__VariantMembers = {};
export type PlasmicClients__VariantsArgs = {};
type VariantPropType = keyof PlasmicClients__VariantsArgs;
export const PlasmicClients__VariantProps = new Array<VariantPropType>();

export type PlasmicClients__ArgsType = {};
type ArgPropType = keyof PlasmicClients__ArgsType;
export const PlasmicClients__ArgProps = new Array<ArgPropType>();

export type PlasmicClients__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  banner?: p.Flex<"div">;
  foreground2?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  text?: p.Flex<"div">;
  dataFetcher?: p.Flex<typeof Fetcher>;
  clientsSection5?: p.Flex<"div">;
  footerTopSection?: p.Flex<"div">;
  homeFooterTop?: p.Flex<typeof HomeFooterTop>;
  footerMain?: p.Flex<typeof FooterMain>;
};

export interface DefaultClientsProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicClients__RenderFunc(props: {
  variants: PlasmicClients__VariantsArgs;
  args: PlasmicClients__ArgsType;
  overrides: PlasmicClients__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsxz8Xf4CC9JH()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicClients.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicClients.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicClients.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <div
            data-plasmic-name={"banner"}
            data-plasmic-override={overrides.banner}
            className={classNames(projectcss.all, sty.banner)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"foreground2"}
              data-plasmic-override={overrides.foreground2}
              hasGap={true}
              className={classNames(projectcss.all, sty.foreground2)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__lm2V)}
              >
                <h1
                  data-plasmic-name={"h1"}
                  data-plasmic-override={overrides.h1}
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1
                  )}
                >
                  {hasVariant(globalVariants, "screen", "sm")
                    ? "Clients"
                    : "Clients"}
                </h1>
                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text
                  )}
                >
                  {hasVariant(globalVariants, "screen", "sm")
                    ? "Lorem Ipsum is simply dummy text of the printing and typesetting "
                    : "Below are the latest reviews from some of our clients. For more reviews, you can visit our Google page."}
                </div>
              </p.Stack>
            </p.Stack>
          </div>
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__zqmSt)}>
              <Fetcher
                data-plasmic-name={"dataFetcher"}
                data-plasmic-override={overrides.dataFetcher}
                className={classNames("__wab_instance", sty.dataFetcher)}
                dataOp={{
                  sourceId: "c9K6QXuqsPMk9CDgad3y6g",
                  opId: "a98bd9bf-31a8-4f97-8c0e-a4cc6743cd1f",
                  userArgs: {},
                  cacheKey:
                    "plasmic.$." +
                    (() => {
                      try {
                        return undefined;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })() +
                    ".$.49sVOPPQZMY1.$.",
                  invalidatedKeys: null,
                  roleId: null
                }}
                name={"googleInformation" as const}
                queries={$queries}
              >
                {($queries: any) => (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.columns__syxo9)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__ccVle)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__kgwdb
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.columns__x33E
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__uMoCg
                            )}
                          >
                            {true
                              ? (
                                  (() => {
                                    try {
                                      return [0];
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })() ?? []
                                ).map((currentItem, _012) => (
                                  <Client
                                    className={classNames(
                                      "__wab_instance",
                                      sty.client__spis0
                                    )}
                                    key={_012}
                                    slot={
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return $queries.googleInformation
                                              .data.response.result.reviews[
                                              currentItem
                                            ].text;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, ";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    }
                                  >
                                    <h2
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h2,
                                        projectcss.__wab_text,
                                        sty.h2__p78Uj
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return $queries.googleInformation
                                              .data.response.result.reviews[
                                              currentItem
                                            ].author_name;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "Client name";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </h2>
                                  </Client>
                                ))
                              : null}
                          </div>
                        </div>
                      </p.Stack>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__npScq)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__lAi4B
                        )}
                      >
                        {true
                          ? (
                              (() => {
                                try {
                                  return [1];
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })() ?? []
                            ).map((currentItem, _012) => (
                              <Client
                                className={classNames(
                                  "__wab_instance",
                                  sty.client__dQWtv
                                )}
                                key={_012}
                                slot={
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $queries.googleInformation.data
                                          .response.result.reviews[currentItem]
                                          .text;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, ";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                }
                              >
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2__urc9
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $queries.googleInformation.data
                                          .response.result.reviews[currentItem]
                                          .author_name;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Client name";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </h2>
                              </Client>
                            ))
                          : null}
                      </p.Stack>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__dmyRf)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___3Oj3H
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.columns__mg9Ig
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__mMbZs
                            )}
                          >
                            {true
                              ? (
                                  (() => {
                                    try {
                                      return [2];
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })() ?? []
                                ).map((currentItem, _012) => (
                                  <Client
                                    className={classNames(
                                      "__wab_instance",
                                      sty.client__roppC
                                    )}
                                    key={_012}
                                    slot={
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return $queries.googleInformation
                                              .data.response.result.reviews[
                                              currentItem
                                            ].text;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, ";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    }
                                  >
                                    <h2
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h2,
                                        projectcss.__wab_text,
                                        sty.h2__stNkv
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return $queries.googleInformation
                                              .data.response.result.reviews[
                                              currentItem
                                            ].author_name;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "Client name";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </h2>
                                  </Client>
                                ))
                              : null}
                          </div>
                        </div>
                      </p.Stack>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__ee6Nt)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vw63B
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.columns__qmuab
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__tDqAc
                            )}
                          >
                            {true
                              ? (
                                  (() => {
                                    try {
                                      return [3];
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })() ?? []
                                ).map((currentItem, _012) => (
                                  <Client
                                    className={classNames(
                                      "__wab_instance",
                                      sty.client__poo7Z
                                    )}
                                    key={_012}
                                    slot={
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return $queries.googleInformation
                                              .data.response.result.reviews[
                                              currentItem
                                            ].text;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, ";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    }
                                  >
                                    <h2
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h2,
                                        projectcss.__wab_text,
                                        sty.h2__ccdJi
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return $queries.googleInformation
                                              .data.response.result.reviews[
                                              currentItem
                                            ].author_name;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "Client name";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </h2>
                                  </Client>
                                ))
                              : null}
                          </div>
                        </div>
                      </p.Stack>
                    </div>
                  </p.Stack>
                )}
              </Fetcher>
            </div>
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"clientsSection5"}
              data-plasmic-override={overrides.clientsSection5}
              hasGap={true}
              className={classNames(projectcss.all, sty.clientsSection5)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___3OsKb)}
              >
                <div className={classNames(projectcss.all, sty.columns__jlTqz)}>
                  <div
                    className={classNames(projectcss.all, sty.column__tRvWq)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__pmlbf
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "sm")
                        ? "More client's we've worked with"
                        : "More client's we've worked with"}
                    </h2>
                  </div>
                  <div className={classNames(projectcss.all, sty.column__u9WW)}>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__irXv7)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__htheK
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__hqUdo)}
                          displayHeight={"48px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          src={{
                            src: "/plasmic/copy_of_seodapop_main_website/images/airbnbsvg.svg",
                            fullWidth: 300,
                            fullHeight: 96,
                            aspectRatio: 3.125
                          }}
                        />

                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__gt9JX)}
                          displayHeight={"48px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          src={{
                            src: "/plasmic/copy_of_seodapop_main_website/images/asanasvg.svg",
                            fullWidth: 300,
                            fullHeight: 62,
                            aspectRatio: 4.863636
                          }}
                        />

                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__ciZg)}
                          displayHeight={"48px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          src={{
                            src: "/plasmic/copy_of_seodapop_main_website/images/disneysvg.svg",
                            fullWidth: 300,
                            fullHeight: 124,
                            aspectRatio: 2.41655
                          }}
                        />

                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__bOg)}
                          displayHeight={"48px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          src={{
                            src: "/plasmic/copy_of_seodapop_main_website/images/instacartsvg.svg",
                            fullWidth: 300,
                            fullHeight: 60,
                            aspectRatio: 4.961538
                          }}
                        />
                      </p.Stack>
                    </div>
                  </div>
                </div>
              </p.Stack>
            </p.Stack>
          ) : null}
          <div
            data-plasmic-name={"footerTopSection"}
            data-plasmic-override={overrides.footerTopSection}
            className={classNames(projectcss.all, sty.footerTopSection)}
          >
            <HomeFooterTop
              data-plasmic-name={"homeFooterTop"}
              data-plasmic-override={overrides.homeFooterTop}
              className={classNames("__wab_instance", sty.homeFooterTop)}
            />
          </div>
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__vlPLs)}>
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__yw3EL)}>
                  <FooterMain
                    data-plasmic-name={"footerMain"}
                    data-plasmic-override={overrides.footerMain}
                    className={classNames("__wab_instance", sty.footerMain)}
                  />
                </div>
              ) : null}
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "banner",
    "foreground2",
    "h1",
    "text",
    "dataFetcher",
    "clientsSection5",
    "footerTopSection",
    "homeFooterTop",
    "footerMain"
  ],
  header: ["header"],
  banner: ["banner", "foreground2", "h1", "text"],
  foreground2: ["foreground2", "h1", "text"],
  h1: ["h1"],
  text: ["text"],
  dataFetcher: ["dataFetcher"],
  clientsSection5: ["clientsSection5"],
  footerTopSection: ["footerTopSection", "homeFooterTop"],
  homeFooterTop: ["homeFooterTop"],
  footerMain: ["footerMain"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  banner: "div";
  foreground2: "div";
  h1: "h1";
  text: "div";
  dataFetcher: typeof Fetcher;
  clientsSection5: "div";
  footerTopSection: "div";
  homeFooterTop: typeof HomeFooterTop;
  footerMain: typeof FooterMain;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicClients__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicClients__VariantsArgs;
    args?: PlasmicClients__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicClients__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicClients__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicClients__ArgProps,
          internalVariantPropNames: PlasmicClients__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicClients__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicClients";
  } else {
    func.displayName = `PlasmicClients.${nodeName}`;
  }
  return func;
}

export const PlasmicClients = Object.assign(
  // Top-level PlasmicClients renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    banner: makeNodeComponent("banner"),
    foreground2: makeNodeComponent("foreground2"),
    h1: makeNodeComponent("h1"),
    text: makeNodeComponent("text"),
    dataFetcher: makeNodeComponent("dataFetcher"),
    clientsSection5: makeNodeComponent("clientsSection5"),
    footerTopSection: makeNodeComponent("footerTopSection"),
    homeFooterTop: makeNodeComponent("homeFooterTop"),
    footerMain: makeNodeComponent("footerMain"),

    // Metadata about props expected for PlasmicClients
    internalVariantProps: PlasmicClients__VariantProps,
    internalArgProps: PlasmicClients__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Clients",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicClients;
/* prettier-ignore-end */
