// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8wYegXbGoCMkdE9E8Fa7UT
// Component: DMYYEkUfpXKF

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantsxz8Xf4CC9JH } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: xz8Xf4c_C9jH/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_copy_of_seodapop_main_website.module.css"; // plasmic-import: 8wYegXbGoCMkdE9E8Fa7UT/projectcss
import sty from "./PlasmicNewPage2.module.css"; // plasmic-import: DMYYEkUfpXKF/css

import Icon29Icon from "./icons/PlasmicIcon__Icon29"; // plasmic-import: YZP2bkqbIK9m/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: 1bXeucmq9YFY/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: ozoqPff96Tk5/icon
import Icon28Icon from "./icons/PlasmicIcon__Icon28"; // plasmic-import: 6yS4KgYZc5Eu/icon

createPlasmicElementProxy;

export type PlasmicNewPage2__VariantMembers = {};
export type PlasmicNewPage2__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewPage2__VariantsArgs;
export const PlasmicNewPage2__VariantProps = new Array<VariantPropType>();

export type PlasmicNewPage2__ArgsType = {};
type ArgPropType = keyof PlasmicNewPage2__ArgsType;
export const PlasmicNewPage2__ArgProps = new Array<ArgPropType>();

export type PlasmicNewPage2__OverridesType = {
  root?: p.Flex<"div">;
  headerSliderSection?: p.Flex<"div">;
  button?: p.Flex<"button">;
  h1?: p.Flex<"h1">;
  art?: p.Flex<"div">;
  background2?: p.Flex<"div">;
  copy?: p.Flex<"div">;
  copy2?: p.Flex<"div">;
  art2?: p.Flex<"div">;
  copy3?: p.Flex<"div">;
  art3?: p.Flex<"div">;
};

export interface DefaultNewPage2Props {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNewPage2__RenderFunc(props: {
  variants: PlasmicNewPage2__VariantsArgs;
  args: PlasmicNewPage2__ArgsType;
  overrides: PlasmicNewPage2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsxz8Xf4CC9JH()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"headerSliderSection"}
            data-plasmic-override={overrides.headerSliderSection}
            className={classNames(projectcss.all, sty.headerSliderSection)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ybmCs)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___9UnXl)}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__hIzup)}
                  displayHeight={"default" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"76px" as const}
                  src={{
                    src: "/plasmic/copy_of_seodapop_main_website/images/image29.svg",
                    fullWidth: 150,
                    fullHeight: 150,
                    aspectRatio: 1
                  }}
                />

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___7StiQ)}
                >
                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link___7DtzE
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {false ? (
                      <Icon29Icon
                        className={classNames(projectcss.all, sty.svg__kMa8J)}
                        role={"img"}
                      />
                    ) : null}
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cy56P
                      )}
                    >
                      {"Tour"}
                    </div>
                    {false ? (
                      <Icon29Icon
                        className={classNames(projectcss.all, sty.svg__twUP)}
                        role={"img"}
                      />
                    ) : null}
                  </p.Stack>
                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link___7LRjh
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {false ? (
                      <Icon29Icon
                        className={classNames(projectcss.all, sty.svg__nhF9E)}
                        role={"img"}
                      />
                    ) : null}
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lbOw
                      )}
                    >
                      {"Pricing"}
                    </div>
                    {false ? (
                      <Icon29Icon
                        className={classNames(projectcss.all, sty.svg__lx8Gs)}
                        role={"img"}
                      />
                    ) : null}
                  </p.Stack>
                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link___3LixZ
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {false ? (
                      <Icon29Icon
                        className={classNames(projectcss.all, sty.svg__otC)}
                        role={"img"}
                      />
                    ) : null}
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lJOkz
                      )}
                    >
                      {"Company"}
                    </div>
                    {false ? (
                      <Icon29Icon
                        className={classNames(projectcss.all, sty.svg__snfJs)}
                        role={"img"}
                      />
                    ) : null}
                  </p.Stack>
                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__vhOqb
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {false ? (
                      <Icon29Icon
                        className={classNames(projectcss.all, sty.svg__nUZt)}
                        role={"img"}
                      />
                    ) : null}
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__sdeE3
                      )}
                    >
                      {"Contact"}
                    </div>
                    {false ? (
                      <Icon29Icon
                        className={classNames(projectcss.all, sty.svg__haYrJ)}
                        role={"img"}
                      />
                    ) : null}
                  </p.Stack>
                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__vOeUz
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {false ? (
                      <Icon29Icon
                        className={classNames(projectcss.all, sty.svg__zsGn)}
                        role={"img"}
                      />
                    ) : null}
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0Ephm
                      )}
                    >
                      {"Sign up"}
                    </div>
                    {false ? (
                      <Icon29Icon
                        className={classNames(projectcss.all, sty.svg__hmDyg)}
                        role={"img"}
                      />
                    ) : null}
                  </p.Stack>
                </p.Stack>
                {false ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__a6Lgm)}
                  >
                    <button
                      data-plasmic-name={"button"}
                      data-plasmic-override={overrides.button}
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        projectcss.__wab_text,
                        sty.button
                      )}
                    >
                      {"Sign up"}
                    </button>
                    <p.Stack
                      as={p.PlasmicLink}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__n4Ur4
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <Icon29Icon
                          className={classNames(projectcss.all, sty.svg__rwWfG)}
                          role={"img"}
                        />
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__y9KIj
                        )}
                      >
                        {"Log in"}
                      </div>
                      {false ? (
                        <Icon29Icon
                          className={classNames(projectcss.all, sty.svg__repOq)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>
                  </div>
                ) : null}
              </p.Stack>
            </p.Stack>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__rRvQx)}
            >
              <h1
                data-plasmic-name={"h1"}
                data-plasmic-override={overrides.h1}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1
                )}
              >
                {"Hero text for your startup's product."}
              </h1>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__q8Baq
                )}
              >
                {hasVariant(globalVariants, "screen", "lg")
                  ? "This is introduction text describing why people should use your product. Double-click anywhere on the text to edit it's contents."
                  : "Lorem Ipsum is simply dummy text of the \nprinting and typesetting industry. "}
              </div>
              {true ? (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__npMMv)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "lg")
                      ? ("auto" as const)
                      : ("454px" as const)
                  }
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"81%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/copy_of_seodapop_main_website/images/image30.png",
                    fullWidth: 2006,
                    fullHeight: 2006,
                    aspectRatio: undefined
                  }}
                />
              ) : null}
            </p.Stack>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__rkDno)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__sk0U1)}
            >
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2__jFeh4
                )}
              >
                {hasVariant(globalVariants, "screen", "lg")
                  ? "This header tells people why\n they should use your product."
                  : "Lorem Ipsum is Simply dummy text of\n the printing and typesetting industry"}
              </h2>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ahBl
                )}
              >
                {hasVariant(globalVariants, "screen", "lg")
                  ? "This is text giving an overview of the features section. Double-click anywhere on the text to edit it's contents."
                  : "Lorem Ipsum is Simply dummy text of the\n printing and typesetting industry"}
              </div>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__mgPt2)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__x5Vif)}>
                  <div
                    data-plasmic-name={"art"}
                    data-plasmic-override={overrides.art}
                    className={classNames(projectcss.all, sty.art)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__uDu62)}
                      displayHeight={"90%" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"none" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"90%" as const}
                      src={{
                        src: "/plasmic/copy_of_seodapop_main_website/images/image31.png",
                        fullWidth: 530,
                        fullHeight: 471,
                        aspectRatio: undefined
                      }}
                    />

                    <div
                      data-plasmic-name={"background2"}
                      data-plasmic-override={overrides.background2}
                      className={classNames(projectcss.all, sty.background2)}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__jDIxO)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__sTl1T)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"copy"}
                        data-plasmic-override={overrides.copy}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.copy)}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__mee42
                          )}
                        >
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__dXxLe
                            )}
                          >
                            {"Lorem Ipsum "}
                          </h3>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__aAVqL
                            )}
                          >
                            {
                              "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book"
                            }
                          </div>
                        </p.Stack>
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__liaMx
                          )}
                        >
                          <p.Stack
                            as={p.PlasmicLink}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__zbnUk
                            )}
                            component={Link}
                            platform={"nextjs"}
                          >
                            {false ? (
                              <Icon29Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__vcbm0
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__sjzYy
                              )}
                            >
                              {"Learn more"}
                            </div>
                            {false ? (
                              <Icon29Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__b88Ul
                                )}
                                role={"img"}
                              />
                            ) : null}
                          </p.Stack>
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                  </div>
                </div>
              </p.Stack>
            </p.Stack>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__iTaWv)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__ecq1N)}
            >
              <div className={classNames(projectcss.all, sty.column__xoa7B)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__aOizc)}
                >
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__dCr0V
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "lg")
                      ? "This heading"
                      : "This heading"}
                  </h3>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jdGDe
                    )}
                  >
                    {
                      "Lorem Ipsum is simply dummy text of the printing and typesetting industry. "
                    }
                  </div>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__eUoVm)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/copy_of_seodapop_main_website/images/image32.png",
                      fullWidth: 499,
                      fullHeight: 499,
                      aspectRatio: undefined
                    }}
                  />
                </p.Stack>
              </div>
              <div className={classNames(projectcss.all, sty.column___6URrm)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__jk3Kx)}
                >
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__vC4RA
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "lg")
                      ? "This heading"
                      : "This heading"}
                  </h3>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__m6QT
                    )}
                  >
                    {
                      "Lorem Ipsum is simply dummy text of the printing and typesetting industry. "
                    }
                  </div>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___97Uz0)}
                    displayHeight={"350px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/copy_of_seodapop_main_website/images/image33.svg",
                      fullWidth: 133,
                      fullHeight: 150,
                      aspectRatio: 0.885714
                    }}
                  />
                </p.Stack>
              </div>
            </p.Stack>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__oCasv)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___1Treu)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__g5RxW)}>
                <div className={classNames(projectcss.all, sty.freeBox__gtpp)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___6RfCa)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"copy2"}
                      data-plasmic-override={overrides.copy2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.copy2)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nOo5
                        )}
                      >
                        <h3
                          className={classNames(
                            projectcss.all,
                            projectcss.h3,
                            projectcss.__wab_text,
                            sty.h3__mUZnA
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "lg")
                            ? "This is header about this product feature."
                            : "This is header about this product feature."}
                        </h3>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wsAh7
                          )}
                        >
                          {
                            "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book"
                          }
                        </div>
                      </p.Stack>
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__opLok
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__cvZsf
                          )}
                        >
                          <p.Stack
                            as={p.PlasmicLink}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__nwfd2
                            )}
                            component={Link}
                            platform={"nextjs"}
                          >
                            {false ? (
                              <Icon29Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__cyCJz
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__n5TN
                              )}
                            >
                              {"Learn more"}
                            </div>
                            {false ? (
                              <Icon29Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__l4Buo
                                )}
                                role={"img"}
                              />
                            ) : null}
                          </p.Stack>
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                </div>
                <div
                  data-plasmic-name={"art2"}
                  data-plasmic-override={overrides.art2}
                  className={classNames(projectcss.all, sty.art2)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___2KmN6)}
                    displayHeight={"363px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    src={{
                      src: "/plasmic/copy_of_seodapop_main_website/images/image34.png",
                      fullWidth: 777,
                      fullHeight: 687,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </div>
            </p.Stack>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__lqEln)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__hdUk6)}
            >
              <div className={classNames(projectcss.all, sty.column__hErV)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__sAkPv)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__mux2J)}
                    displayHeight={"243px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/copy_of_seodapop_main_website/images/image36.png",
                      fullWidth: 562,
                      fullHeight: 444,
                      aspectRatio: undefined
                    }}
                  />

                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__oa7Gt
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "lg")
                      ? "This heading"
                      : "This heading"}
                  </h3>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iazg
                    )}
                  >
                    {
                      "Lorem Ipsum is simply dummy text of the printing and typesetting industry. "
                    }
                  </div>
                </p.Stack>
              </div>
              <div className={classNames(projectcss.all, sty.column__uWk6F)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__mx9Ln)}
                >
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__xaDju
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "lg")
                      ? "This is header about this other product feature."
                      : "This is header about this other product feature."}
                  </h3>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kwP5N
                    )}
                  >
                    {
                      "Lorem Ipsum is simply dummy text of the printing and typesetting industry. "
                    }
                  </div>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__bDgyr)}
                    displayHeight={"248px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/copy_of_seodapop_main_website/images/image37.png",
                      fullWidth: 577,
                      fullHeight: 433,
                      aspectRatio: undefined
                    }}
                  />
                </p.Stack>
              </div>
            </p.Stack>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__qR9Br)}>
            <div className={classNames(projectcss.all, sty.freeBox__pUfI2)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__xLIfM)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__vvhLe)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___4KFYv)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__y3O2)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"copy3"}
                        data-plasmic-override={overrides.copy3}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.copy3)}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__m7E4L
                          )}
                        >
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__eqkCj
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "lg")
                              ? "Trusted by thousands of companies"
                              : "Lorem Ipsum is simply dummy text"}
                          </h3>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__njUvr
                            )}
                          >
                            {
                              "Lorem Ipsum is simply dummy text of the printing and typesetting industry. "
                            }
                          </div>
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                  </div>
                  <div
                    data-plasmic-name={"art3"}
                    data-plasmic-override={overrides.art3}
                    className={classNames(projectcss.all, sty.art3)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__e6UNw)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "lg")
                          ? ("220px" as const)
                          : ("399px" as const)
                      }
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"none" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"100%" as const}
                      src={{
                        src: "/plasmic/copy_of_seodapop_main_website/images/image39.png",
                        fullWidth: 480,
                        fullHeight: 517,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                </div>
              </p.Stack>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__clQDj)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__tGmLy)}
            >
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2__rFfCg
                )}
              >
                {hasVariant(globalVariants, "screen", "lg")
                  ? "This is a final call-to-\naction header"
                  : "Make a call to action."}
              </h2>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__eM2PL)}
              >
                <p.Stack
                  as={p.PlasmicLink}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link___4BYx9
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <Icon29Icon
                      className={classNames(projectcss.all, sty.svg__oX0T)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gorGc
                    )}
                  >
                    {"Sign up today"}
                  </div>
                  {false ? (
                    <Icon29Icon
                      className={classNames(projectcss.all, sty.svg__zkTbb)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__d2Fr3)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__lHc5P)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__wPiNn)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___8Bs6P)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___8S1Et)}
                    displayHeight={"40px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"40px" as const}
                    src={{
                      src: "/plasmic/copy_of_seodapop_main_website/images/image29.svg",
                      fullWidth: 150,
                      fullHeight: 150,
                      aspectRatio: 1
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fs4Xa
                    )}
                  >
                    {"Company Name"}
                  </div>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__wYEhg)}
                  >
                    {true ? (
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link___6GW4X
                        )}
                        component={Link}
                        href={"#" as const}
                        platform={"nextjs"}
                      >
                        <Icon4Icon
                          className={classNames(projectcss.all, sty.svg__h0Als)}
                          role={"img"}
                        />
                      </p.PlasmicLink>
                    ) : null}
                    {true ? (
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__r2AsC
                        )}
                        component={Link}
                        platform={"nextjs"}
                      >
                        <Icon5Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___4AKgL
                          )}
                          role={"img"}
                        />
                      </p.PlasmicLink>
                    ) : null}
                    {true ? (
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__v82Gb
                        )}
                        component={Link}
                        platform={"nextjs"}
                      >
                        <Icon28Icon
                          className={classNames(projectcss.all, sty.svg___4IZo)}
                          role={"img"}
                        />
                      </p.PlasmicLink>
                    ) : null}
                  </p.Stack>
                </p.Stack>
              </p.Stack>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__gX9Zt)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__p3Hn0
                  )}
                >
                  {"Product"}
                </h3>
                <p.Stack
                  as={p.PlasmicLink}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__j6R6M
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <Icon29Icon
                      className={classNames(projectcss.all, sty.svg__rCptl)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pAzoR
                    )}
                  >
                    {"Pricing"}
                  </div>
                  {false ? (
                    <Icon29Icon
                      className={classNames(projectcss.all, sty.svg__dOrvF)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
                <p.Stack
                  as={p.PlasmicLink}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__qoedA
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <Icon29Icon
                      className={classNames(projectcss.all, sty.svg__fiij4)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ybyNm
                    )}
                  >
                    {"Log in"}
                  </div>
                  {false ? (
                    <Icon29Icon
                      className={classNames(projectcss.all, sty.svg__gGpcX)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
                <p.Stack
                  as={p.PlasmicLink}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__xovZs
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <Icon29Icon
                      className={classNames(projectcss.all, sty.svg__k1Lnq)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kRnZt
                    )}
                  >
                    {"Integrations"}
                  </div>
                  {false ? (
                    <Icon29Icon
                      className={classNames(projectcss.all, sty.svg__rxYft)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
                <p.Stack
                  as={p.PlasmicLink}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__dxbO
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <Icon29Icon
                      className={classNames(projectcss.all, sty.svg__xWs8Q)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___1Elcx
                    )}
                  >
                    {"Insights"}
                  </div>
                  {false ? (
                    <Icon29Icon
                      className={classNames(projectcss.all, sty.svg__mZvEf)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
              </p.Stack>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__rh75R)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3___7AauR
                  )}
                >
                  {"Legal"}
                </h3>
                <p.Stack
                  as={p.PlasmicLink}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link___2UF2T
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <Icon29Icon
                      className={classNames(projectcss.all, sty.svg__l2LEf)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jvMok
                    )}
                  >
                    {"Documentation"}
                  </div>
                  {false ? (
                    <Icon29Icon
                      className={classNames(projectcss.all, sty.svg__gT9Rg)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
                <p.Stack
                  as={p.PlasmicLink}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__m6Z5
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <Icon29Icon
                      className={classNames(projectcss.all, sty.svg__mdhhz)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ln18U
                    )}
                  >
                    {"FAQs"}
                  </div>
                  {false ? (
                    <Icon29Icon
                      className={classNames(projectcss.all, sty.svg__oE0UL)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
                <p.Stack
                  as={p.PlasmicLink}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__eUza
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <Icon29Icon
                      className={classNames(projectcss.all, sty.svg__uoCng)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zBaQs
                    )}
                  >
                    {"Status"}
                  </div>
                  {false ? (
                    <Icon29Icon
                      className={classNames(projectcss.all, sty.svg__xFvz)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
              </p.Stack>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___48Jp1)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__vkPgx
                  )}
                >
                  {"Company"}
                </h3>
                <p.Stack
                  as={p.PlasmicLink}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__c6IpO
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <Icon29Icon
                      className={classNames(projectcss.all, sty.svg___45Sl0)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3PZra
                    )}
                  >
                    {"About"}
                  </div>
                  {false ? (
                    <Icon29Icon
                      className={classNames(projectcss.all, sty.svg__eu7QC)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
                <p.Stack
                  as={p.PlasmicLink}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__m2Y5
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <Icon29Icon
                      className={classNames(projectcss.all, sty.svg__iOi3G)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__k2Sch
                    )}
                  >
                    {"Contact us"}
                  </div>
                  {false ? (
                    <Icon29Icon
                      className={classNames(projectcss.all, sty.svg__aAfqX)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
                <p.Stack
                  as={p.PlasmicLink}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link___4Cmu
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <Icon29Icon
                      className={classNames(projectcss.all, sty.svg__dYPi)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__l8LdO
                    )}
                  >
                    {"Careers"}
                  </div>
                  {false ? (
                    <Icon29Icon
                      className={classNames(projectcss.all, sty.svg___79VDc)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
                <p.Stack
                  as={p.PlasmicLink}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__xUtae
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <Icon29Icon
                      className={classNames(projectcss.all, sty.svg__yKCbv)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tpsFu
                    )}
                  >
                    {"Media"}
                  </div>
                  {false ? (
                    <Icon29Icon
                      className={classNames(projectcss.all, sty.svg__h9M5Z)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
              </p.Stack>
            </p.Stack>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__d3Yo8
              )}
            >
              <React.Fragment>
                <React.Fragment>
                  {
                    "\u00a9 Company. All rights reserved. This site proudly built with "
                  }
                </React.Fragment>
                {
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      projectcss.plasmic_default__inline,
                      sty.link__nEgIj
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {"Plasmic"}
                  </p.PlasmicLink>
                }
                <React.Fragment>{"."}</React.Fragment>
              </React.Fragment>
            </div>
          </div>
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerSliderSection",
    "button",
    "h1",
    "art",
    "background2",
    "copy",
    "copy2",
    "art2",
    "copy3",
    "art3"
  ],
  headerSliderSection: ["headerSliderSection", "button", "h1"],
  button: ["button"],
  h1: ["h1"],
  art: ["art", "background2"],
  background2: ["background2"],
  copy: ["copy"],
  copy2: ["copy2"],
  art2: ["art2"],
  copy3: ["copy3"],
  art3: ["art3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerSliderSection: "div";
  button: "button";
  h1: "h1";
  art: "div";
  background2: "div";
  copy: "div";
  copy2: "div";
  art2: "div";
  copy3: "div";
  art3: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewPage2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewPage2__VariantsArgs;
    args?: PlasmicNewPage2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewPage2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNewPage2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNewPage2__ArgProps,
          internalVariantPropNames: PlasmicNewPage2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNewPage2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewPage2";
  } else {
    func.displayName = `PlasmicNewPage2.${nodeName}`;
  }
  return func;
}

export const PlasmicNewPage2 = Object.assign(
  // Top-level PlasmicNewPage2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerSliderSection: makeNodeComponent("headerSliderSection"),
    button: makeNodeComponent("button"),
    h1: makeNodeComponent("h1"),
    art: makeNodeComponent("art"),
    background2: makeNodeComponent("background2"),
    copy: makeNodeComponent("copy"),
    copy2: makeNodeComponent("copy2"),
    art2: makeNodeComponent("art2"),
    copy3: makeNodeComponent("copy3"),
    art3: makeNodeComponent("art3"),

    // Metadata about props expected for PlasmicNewPage2
    internalVariantProps: PlasmicNewPage2__VariantProps,
    internalArgProps: PlasmicNewPage2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicNewPage2;
/* prettier-ignore-end */
