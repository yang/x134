// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8wYegXbGoCMkdE9E8Fa7UT
// Component: 1FeCvEg_AYKY

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  usePlasmicDataConfig,
  executePlasmicDataOp,
  usePlasmicDataOp
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: H6-d8Aj-Ormm/component
import { SanityFetcher } from "@plasmicpkgs/plasmic-sanity-io"; // plasmic-import: 9KPt6XktlFK/codeComponent
import { RichText } from "../../PortableText"; // plasmic-import: WE0t5r1I-L-Q/codeComponent
import HomeFooterTop from "../../HomeFooterTop"; // plasmic-import: mJUZtuXVhVM/component
import FooterMain from "../../FooterMain"; // plasmic-import: 0v3474AfNCdQ/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: EUozRgV8Ll6k/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_copy_of_seodapop_main_website.module.css"; // plasmic-import: 8wYegXbGoCMkdE9E8Fa7UT/projectcss
import sty from "./PlasmicPagesslug.module.css"; // plasmic-import: 1FeCvEg_AYKY/css

createPlasmicElementProxy;

export type PlasmicPagesslug__VariantMembers = {};
export type PlasmicPagesslug__VariantsArgs = {};
type VariantPropType = keyof PlasmicPagesslug__VariantsArgs;
export const PlasmicPagesslug__VariantProps = new Array<VariantPropType>();

export type PlasmicPagesslug__ArgsType = {};
type ArgPropType = keyof PlasmicPagesslug__ArgsType;
export const PlasmicPagesslug__ArgProps = new Array<ArgPropType>();

export type PlasmicPagesslug__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  sanityFetcher?: p.Flex<typeof SanityFetcher>;
  img?: p.Flex<typeof p.PlasmicImg>;
  richText?: p.Flex<typeof RichText>;
  homeFooterTop?: p.Flex<typeof HomeFooterTop>;
  footerMain?: p.Flex<typeof FooterMain>;
};

export interface DefaultPagesslugProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPagesslug__RenderFunc(props: {
  variants: PlasmicPagesslug__VariantsArgs;
  args: PlasmicPagesslug__ArgsType;
  overrides: PlasmicPagesslug__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {true ? (
          <div
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              sty.root
            )}
          >
            <Header
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames("__wab_instance", sty.header)}
            />

            <div className={classNames(projectcss.all, sty.freeBox___0Dtva)}>
              <SanityFetcher
                data-plasmic-name={"sanityFetcher"}
                data-plasmic-override={overrides.sanityFetcher}
                className={classNames("__wab_instance", sty.sanityFetcher)}
                groq={(() => {
                  try {
                    return `*[_type == "page"&& slug.current == "${$ctx.params.slug}" ] {
    _id,
    _createdAt,
    title,    body,'mainImage':mainImage.asset->url
}`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                noAutoRepeat={true}
                noLayout={false}
              >
                <ph.DataCtxReader>
                  {$ctx =>
                    true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__v9Hb
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jyfdP
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $ctx.sanityItems[0].title;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__zUhBp
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return undefined;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <p.PlasmicImg
                          data-plasmic-name={"img"}
                          data-plasmic-override={overrides.img}
                          alt={""}
                          className={classNames(sty.img)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"685px" as const}
                          loading={"lazy" as const}
                          src={(() => {
                            try {
                              return $ctx.sanityItems[0].mainImage;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />

                        <RichText
                          data-plasmic-name={"richText"}
                          data-plasmic-override={overrides.richText}
                          className={classNames("__wab_instance", sty.richText)}
                          values={(() => {
                            try {
                              return $ctx.sanityItems[0].body;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fjpH
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $ctx.pageDataInfo;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                    ) : null
                  }
                </ph.DataCtxReader>
              </SanityFetcher>
            </div>
            <HomeFooterTop
              data-plasmic-name={"homeFooterTop"}
              data-plasmic-override={overrides.homeFooterTop}
              className={classNames("__wab_instance", sty.homeFooterTop)}
            />

            <FooterMain
              data-plasmic-name={"footerMain"}
              data-plasmic-override={overrides.footerMain}
              className={classNames("__wab_instance", sty.footerMain)}
            />
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "sanityFetcher",
    "img",
    "richText",
    "homeFooterTop",
    "footerMain"
  ],
  header: ["header"],
  sanityFetcher: ["sanityFetcher", "img", "richText"],
  img: ["img"],
  richText: ["richText"],
  homeFooterTop: ["homeFooterTop"],
  footerMain: ["footerMain"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  sanityFetcher: typeof SanityFetcher;
  img: typeof p.PlasmicImg;
  richText: typeof RichText;
  homeFooterTop: typeof HomeFooterTop;
  footerMain: typeof FooterMain;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPagesslug__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPagesslug__VariantsArgs;
    args?: PlasmicPagesslug__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPagesslug__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPagesslug__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPagesslug__ArgProps,
          internalVariantPropNames: PlasmicPagesslug__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPagesslug__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPagesslug";
  } else {
    func.displayName = `PlasmicPagesslug.${nodeName}`;
  }
  return func;
}

export const PlasmicPagesslug = Object.assign(
  // Top-level PlasmicPagesslug renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    sanityFetcher: makeNodeComponent("sanityFetcher"),
    img: makeNodeComponent("img"),
    richText: makeNodeComponent("richText"),
    homeFooterTop: makeNodeComponent("homeFooterTop"),
    footerMain: makeNodeComponent("footerMain"),

    // Metadata about props expected for PlasmicPagesslug
    internalVariantProps: PlasmicPagesslug__VariantProps,
    internalArgProps: PlasmicPagesslug__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPagesslug;
/* prettier-ignore-end */
