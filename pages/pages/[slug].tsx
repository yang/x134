// This is a skeleton starter React page generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import * as ph from "@plasmicapp/react-web/lib/host";
import GlobalContextsProvider from "../../components/plasmic/copy_of_seodapop_main_website/PlasmicGlobalContextsProvider";
import { ScreenVariantProvider } from "../../components/plasmic/copy_of_seodapop_main_website/PlasmicGlobalVariant__Screen";
import { PlasmicPagesslug } from "../../components/plasmic/copy_of_seodapop_main_website/PlasmicPagesslug";
import { useRouter } from "next/router";
import { extractPlasmicQueryData } from "@plasmicapp/react-web/lib/prepass";
import { PlasmicQueryDataProvider } from "@plasmicapp/react-web/lib/query";
import { GetStaticProps } from "next";

function Body(props: { prefetchedCache?: any; params?: any }) {
  return (
    <PlasmicQueryDataProvider prefetchedCache={props.prefetchedCache}>
      <GlobalContextsProvider>
        <ph.PageParamsProvider params={props.params} query={props.params}>
          <PlasmicPagesslug />
        </ph.PageParamsProvider>
      </GlobalContextsProvider>
    </PlasmicQueryDataProvider>
  );
}

function Pagesslug({ queryCache }: { queryCache?: any }) {
  // Use PlasmicPagesslug to render this component as it was
  // designed in Plasmic, by activating the appropriate variants,
  // attaching the appropriate event handlers, etc.  You
  // can also install whatever React hooks you need here to manage state or
  // fetch data.
  //
  // Props you can pass into PlasmicPagesslug are:
  // 1. Variants you want to activate,
  // 2. Contents for slots you want to fill,
  // 3. Overrides for any named node in the component to attach behavior and data,
  // 4. Props to set on the root node.
  //
  // By default, PlasmicPagesslug is wrapped by your project's global
  // variant context providers. These wrappers may be moved to
  // Next.js Custom App component
  // (https://nextjs.org/docs/advanced-features/custom-app).
  return <Body prefetchedCache={queryCache} params={useRouter().query} />;
}

export const getStaticProps: GetStaticProps = async (ctx) => {
  const queryCache = await extractPlasmicQueryData(
    <Body params={ctx.params} />,
  );
  return {
    props: { queryCache },
  };
};

export async function getStaticPaths() {
  return {
    paths: [],
    fallback: "blocking",
  };
}

export default Pagesslug;
